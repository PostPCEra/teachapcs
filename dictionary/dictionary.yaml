# Dictionary entries that power http://teachapcs.com/dictionary
# Format:
#    word: [string - used as lookup key]
#    display: [string - optional - displayed as the dictionary word. If missing, 'word' is shown.]
#    defintion: [string]
#    succint: [object list - optional - more succinct definition, used when space is constrained.]
#        - text: [string - succinct definition]
#          example: [string - succinct example]
#          wrapper: [string - used for user input; $REPLACE is replaced by highlighted text]
#    example: [string - java code - demonstrates word/concept - HTML okay.]
#    external: [object list - external resources that also explain the concept]
#        - text: [string - describe the link]
#          source: [string - source of link]
#          url: [string - url]
#    related: [object list - other dictionary words related to this one]
#        - word: [string - 'word' key of related word]
#          reason: [string - short statement that relates the two concepts]

--- 
-
  word: double
  definition: "One of Java's basic (primative) types; this one represents a real number."
  succinct:
        - text: "A real number in Java. Also one of Java's basic, or primitive, types."
          example: double test = 2.0;
          wrapper: "double test = $REPLACE;"
  example: -4.5</br>9.4949</br>double d = 500.0;
  external:
        - text: "The double data type is a double-precision 64-bit IEEE 754 floating point. For decimal values, this data type is generally the default choice."
          source: Java Documentation
          url: http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
        - text: "Double-precision floating-point format is a <a href='http://en.wikipedia.org/wiki/Computer_number_format'>computer number format</a> that occupies 8 bytes (64 bits) in computer memory and represents a wide dynamic range of values by using <a href='http://en.wikipedia.org/wiki/Floating_point'>floating point</a>."
          source: Wikipedia
          url: http://en.wikipedia.org/wiki/Double_precision
        - text: "<code>double number = 46.12;</code></br>Creates a decimal variable in your Java program."
          source: Amplify
          url: "https://course-mooc.amplify.com/unit?unit=5&lesson=15"
        - text: This video explains the basics of how floats and doubles work in the Java programming language.
          source: YouTube
          url: https://www.youtube.com/watch?v=MSxzdm4ev_8
  related: 
    - word: boolean
      reason: another of Java's primitive types
    - word: int
      reason: another of Java's primitive types
- 
  word: int
  definition: An integer or whole number.
  succinct:
        - text: "An integer or whole number in Java. Also one Java's basic, or primitive, types."
          example: "int sample = 1;"
          wrapper: "int sample = $REPLACE;"
  example: 49</br>0</br>-1045</br>int i = 3;
  external:
        - text: "By default, the int data type is a 32-bit signed two's complement integer, which has a minimum value of -231 and a maximum value of 231-1."
          source: Java Documentation
          url: "http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
        - text: "In computer science, an integer is a datum of integral data type, a data type which represents some finite subset of the mathematical integers."
          source: Wikipedia
          url: "http://en.wikipedia.org/wiki/Integer_(computer_science)"
        - text: "This video explains the basics behind using primitive types to store integer values in your programs."
          source: YouTube
          url: https://www.youtube.com/watch?v=vVJOAP7Qg_Q
        - text: "<code>int value = 99;</code></br>Creates an integer variable in your Java program."
          source: Amplify
          url: "https://course-mooc.amplify.com/unit?unit=5&lesson=15"
  related:
    - word: double
      reason: another of Java's primitive types
    - word: boolean
      reason: another of Java's primitive types

- 
  word: "boolean"
  definition: "One of Java's basic (primitive) types; this one represents a true or false value."
  succinct:
        - text: "How Java stores true and false values"
          example: "boolean thisWillWork = true;"
          wrapper: "boolean newBool = $REPLACE;"
  example: "true</br>false</br>2 == 2</br>4 != 4.90</br>boolean willRain = false;"
  external:
        - text: "The boolean data type has only two possible values: true and false. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its size isn't something that's precisely defined."
          source: "Java Documentation"
          url: "http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
        - text: "In computer science, the Boolean or logical data type is a data type, having two values (usually denoted true and false), intended to represent the truth values of logic and Boolean algebra."
          source: Wikipedia
          url: "http://en.wikipedia.org/wiki/Boolean_data_type"
        - text: "This activity introduces the idea of booleans, or values that can either be true or false."
          source: "Khan Academy"
          url: "https://www.khanacademy.org/computing/cs/programming/logic-if-statements/p/booleans"
  related:
    - word: "double"
      reason: "another of Java's primitive types"
    - word: "int"
      reason: "another of Java's primitive types"

- 
  word: "type"
  definition: "Groups of values in Java, like <word data-key=\"int\">int</word>, <word data-key=\"double\">double</word>, or <word data-key=\"string\">String</word>. Types help Java be more efficient about storing and retrieving values."
  succinct:
        - text: "How Java groups different values."
          example: "int"
  example: 
  external:
        - text: "Basic data types in Java"
          source: "Tutorial point"
          url: "http://www.tutorialspoint.com/java/java_basic_datatypes.htm"
        - text: "Data types and type conversions"
          source: "YouTube"
          url: "https://www.youtube.com/watch?v=bqPIWlnjWbA"
  related:
    - word: "bytes"
      reason: "How Java stores types in memory"

- 
  word: "integer-min"
  display: "Integer.MIN_VALUE"
  definition: "The smallest integer value Java can store: -2<sup>31</sup>"
  example:
  external:
        - text: "A constant holding the minimum value an int can have, -2<sup>31</sup>."
          source: Java Documentation
          url: "http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#MIN_VALUE"
        - text: "Recent questions developers have asked about Integer.MIN_VALUE"
          source: Stack Overflow
          url: "http://stackoverflow.com/search?q=Integer.MIN_VALUE+%5Bjava%5D+score%3A10"
  related: 
    - word: "Integer.MAX_VALUE"
      reason: the constant Java keeps for its largest integer value.

- 
  word: "integer-max"
  display: "Integer.MAX_VALUE"
  definition: "The largest integer value Java can store: 2<sup>31</sup> - 1"
  example:
  external:
        - text: "A constant holding the maximum value an int can have, 2<sup>31</sup> - 1."
          source: Java Documentation
          url: "http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#MAX_VALUE"
        - text: 'Recent questions developers have asked about Integer.MAX_VALUE'
          source: Stack Overflow
          url: "http://stackoverflow.com/search?q=Integer.MAX_VALUE+%5Bjava%5D+score%3A10"
  related: 
    - word: "Integer.MIN_VALUE"
      reason: the constant Java keeps for its smallest integer value

- 
  word: Integer
  definition: "A Java class that wraps a (primitive) int in an object.</p><p>The object contains just one instance variable whose type is int.</p>"
  example:
  external:
  related: 
    - word: int
      reason: the primitive data type the Integer class wraps.
    - word: Wrapper class
      reason: a set of Java classes that wrap primitive data types in objects

- 
  word: "double-class"
  display: Double
  definition: "A Java class that wraps a (primitive) double in an object.</p><p>The object contains just one instance variable whose type is double.</p>"
  example:
  external:
  related: 
    - word: double
      reason: the primitive data type the Double class wraps.
    - word: Wrapper class
      reason: a set of Java classes that wrap primitive data types in objects

- 
  word: "Boolean-class"
  display: Boolean
  definition: "A Java class that wraps a (primitive) boolean in an object.</p><p>The object contains just one instance variable whose type is boolean.</p>"
  example:
  external:
  related: 
    - word: "boolean"
      reason: "the primitive data type the Boolean class wraps"
    - word: "Wrapper class"
      reason: "a set of Java classes that wrap primitive data types in objects"

- 
  word: String
  definition: "A Java class that stores \"strings\" of letters or characters."
  succinct: 
    - text: "How Java stores sets of letters, like words."
      example: String greeting = "Hi!";
      wrapper: "String myString = $REPLACE;"
  example: String company = "Google";</br>String state = new String("California");
  external:
    - text: "Video introducing characters and strings in Java."
      source: YouTube
      url: https://www.youtube.com/watch?v=k5R3skKKQBg
    - text: How to create a string variable in your Java program.
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=5&lesson=15"
  related:
    - word: char
      reason: Strings are made up of sequences of characters

- 
  word: char
  definition: One of Java's basic (primitive) types; this one represents one charcter.
  succinct: 
    - text: "How Java stores individual letters."
      example: char happy = "!";
      wrapper: "char myCharacter = $REPLACE;"
  example: char myCharacter = '!';
  external:
    - text: "Introducing Java's characters and strings."
      source: YouTube
      url: "https://www.youtube.com/watch?v=k5R3skKKQBg"
    - text: "Three videos that cover one-dimensional arrays."
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=53&lesson=121"
  related:
    - word: String
      reason: a sequence of characters is called a String in Java.

- 
  word: array
  definition: A data structure that's used to hold a list of items of the same type.
  succinct:
    - text: A tool built into Java that lets you keep track of a list of items.
      example: "String[] smalltalk = new String[10];"
  example: "double[] data = new double[25];<br/>...<br/>double[0]=0.26;<br/><br/>int[] coins= {1, 2, 5, 10, 25};"
  external:
    - text: "Introducing Java's arrays."
      source: YouTube
      url: https://www.youtube.com/watch?v=L06uGnF4IpY
      url: "https://course-mooc.amplify.com/unit?unit=5&lesson=15"
    - text: Introducing arrays
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/arrays/p/intro-to-arrays"
  related:

- 
  word: array-string
  display: "String[]"
  definition: 'An array, or container, that holds a fixed number of <word data-key="string">Strings</word>.'
  succinct: 
    - text: A tool built into Java that lets you keep track of a list of Strings.
      example: "String[] smalltalk = new String[10];\nsmalltalk[0] = \"Hi!\";\nsmalltalk[1] = \"How's it going?\";\nsmalltalk[2] = \"Have a good day.\";\n"
  example: "String[] smalltalk = new String[10];\nsmallTalk[0] = \"Hi!\";\nsmalltalk[1] = \"How's it going?\";\nsmalltalk[2] = \"Have a good day.\";\n"
  external:
  related:

- 
  word: array-int
  display: "int[]"
  definition: 'An array, or container, that holds a fixed number of <word data-key="int">ints</word>.'
  succinct: 
    - text: A tool built into Java that lets you keep track of a list of ints.
      example: "int[] grades = new int[3];\ngrades[0] = 97;\ngrades[1] = 84;\ngrades[2] = 92;\n"
  example: "int[] grades = new int[3];\ngrades[0] = 97;\ngrades[1] = 84;\ngrades[2] = 92;\n"
  external:
  related:

- 
  word: array-double
  display: "double[]"
  definition: 'An array, or container, that holds a fixed number of <word data-key="double">doubles</word>.'
  succinct: 
    - text: A tool built into Java that lets you keep track of a list of doubles.
      example: "double[] coins = new double[4];\ncoins[0] = 0.01;\ncoins[1] = 0.05;\ncoins[2] = 0.10;\ncoins[3] = 0.25;"
  example: "double[] coins = new double[4];\ncoins[0] = 0.01;\ncoins[1] = 0.05;\ncoins[2] = 0.10;\ncoins[3] = 0.25;"
  external:
  related:

- 
  word: array-boolean
  display: "boolean[]"
  definition: 'An array, or container, that holds a fixed number of <word data-key="boolean">booleans</word>.'
  succinct: 
    - text: A tool built into Java that lets you keep track of a list of booleans.
      example: "boolean[] options = new boolean[2];\noptions[0] = true;\noptions[1] = false;"
  example: "boolean[] options = new boolean[2];\noptions[0] = true;\noptions[1] = false;"
  external:
  related:

- 
  word: arraylist
  definition: "A list that'll hold as many elements as we'd like, so long as all the elements are of the same type."
  succinct: 
    - text: "A list that'll hold as many elements as we'd like, so long as all elements are of the same type."
      example: "ArrayList<String> ourList = new ArrayList<String>();"
  example: "ArrayList<String> ourList = new ArrayList<String>();"
  external:
  related:
    - word: array-string
      reason: Another way to store a set of Strings in Java
    - word: array-boolean
      reason: Another way to store a set of booleans in Java

- 
  word: arraylist-clear
  display: "alist.clear();"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that will clear all the items in the list."
  succinct: 
    - text: "Clear all items from an <word data-key=\"arraylist\">ArrayList</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.clear();"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.clear();"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-remove
  display: "alist.remove(int);"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that removes a specific element from the list."
  succinct: 
    - text: "Remove a specific element from an <word data-key=\"arraylist\">ArrayLists</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.add(\"Goodbye\");\nourList.remove(1);\t//Removes and returns the \"Goodbye\" String"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.add(\"Goodbye\");\nourList.remove(1);\t//Removes and returns the \"Goodbye\" String"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java
    - word: arraylist-clear
      reason: Removing every element from an ArrayList in Java

- 
  word: arraylist-size
  display: "alist.size();"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that returns the number of items in the list."
  succinct: 
    - text: "Return the number of items in an <word data-key=\"arraylist\">ArrayLists</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.size();\t//Returns 0\nourList.add(\"Hello\");\nourList.size();\t//Returns 1"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.size();\t//Returns 0\nourList.add(\"Hello\");\nourList.size();\t//Returns 1"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-isempty
  display: "alist.isEmpty();"  
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that returns true if the ArrayList is empty."
  succinct: 
    - text: "Return true if the <word data-key=\"arraylist\">ArrayList</word> is empty."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.isEmpty();\t//Returns true\nourList.add(\"Hello\");\nourList.isEmpty();\t//Returns false"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.isEmpty();\t//Returns true\nourList.add(\"Hello\");\nourList.isEmpty();\t//Returns false"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-set
  display: "alist.set(0, \"Set me\");"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that sets an item at the specified index."
  succinct: 
    - text: "Sets an element at a specific index in an <word data-key=\"arraylist\">ArrayList</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.set(0, \"Hello\");"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.set(0, \"Hello\");"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-remove
  display: "alist.remove(0);"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that removes and returns an item at the specified index."
  succinct: 
    - text: "Removes and returns an element at a specific index in an <word data-key=\"arraylist\">ArrayList</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.add(\"Goodbye\");\nourList.remove(0);"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.add(\"Goodbye\");\nourList.remove(0);"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-add
  display: "alist.add(\"Add me\");"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that adds an item at the end of the list."
  succinct: 
    - text: "Adds an element at the end of the <word data-key=\"arraylist\">ArrayList</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-get
  display: "alist.get(0);"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that gets an item at the specific index but doesn't change the list."
  succinct: 
    - text: "Gets an element at a specific index in an <word data-key=\"arraylist\">ArrayList</word>."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.get(0);\t//Returns \"Hello\""
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.get(0);\t//Returns \"Hello\""
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: arraylist-insert
  display: "alist.insert(1, \"Insert me\");"
  definition: "A method built into <word data-key=\"arraylist\">ArrayLists</word> that inserts an item at the specific index, shifting all the later elements to the right."
  succinct: 
    - text: "Inserts an element at a specific index in an <word data-key=\"arraylist\">ArrayList</word>, shifting later elements to the right."
      example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.insert(0, \"Goodbye\");"
  example: "ArrayList<String> ourList = new ArrayList<String>();\nourList.add(\"Hello\");\nourList.insert(0, \"Goodbye\");"
  external:
  related:
    - word: arraylist
      reason: Making an ArrayList in Java

- 
  word: '\'
  display: "Escape sequence"
  definition: "<p>A backslash (<code>\\</code>) indicates the beginning of an escape sequence.</p><p>In Java, escape sequences are used to tell a computer to do something <em>other</em> than what it would normally do.</p>"
  succinct:
        - text: 'Preceding a double quote with a backslash (<code>\"</code>) will let that quote mark be printed normally, rather than be part of defining a String.'
          example: "String escaped = \"I \\\"love\\\" Java\";"
  example: '"\\Hi"&nbsp;&nbsp;&nbsp;&nbsp;//"\Hi"<br/>"\nHi!"&nbsp;&nbsp;&nbsp;&nbsp;//"<br/>Hi!"<br/>"\tHi"&nbsp;&nbsp;&nbsp;&nbsp;//"&nbsp;&nbsp;&nbsp;&nbsp;Hi"<br/>"I \"love\" NYC"&nbsp;&nbsp;&nbsp;&nbsp;//"I "love" NYC"'
  external:
    - text: 'A character preceded by a backslash (\) is an escape sequence and has special meaning to the compiler.'
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/java/data/characters.html"
    - text: Recent questions developers have asked about escaping characters and Strings in Java.
      source: Stack Overflow
      url: "http://stackoverflow.com/questions/tagged/escaping+java?sort=votes&pageSize=15"
    - text: "An escape sequence is a series of characters used to change the state of computers and their attached peripheral devices. Escape sequences use an escape character to change the meaning of the characters which follow it, meaning that the characters can be interpreted as a command to be executed rather than as data."
      source: Wikipedia
      url: http://en.wikipedia.org/wiki/Escape_sequence
    - text: "This video explains Java's escape character for inserting special characters into a String."
      source: YouTube
      url: "https://www.youtube.com/watch?v=Q4FCZYwFV_c"
  related: 
    - word: '\"'
      reason: The escape sequence for a double quote.

- 
  word: '\n'
  display: "New line"
  definition: The escape sequence that indicates a new line.
  succinct:
        - text: 'Create a line break in a String with a <code>\n</code>.'
          example: "System.out.print(\"First line!\\nSecond line!\");\n/* First line!\n * Second line!\n */"
  example: '<pre><code>String s = "First line!\nSecond line!"</br>System.out.println(s);</br>First line!</br>Second line!</code></pre>'
  external:
    - text: A character preceded by a backslash (\) is an escape sequence and has special meaning to the compiler.
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/java/data/characters.html"
    - text: Recent questions developers have asked about escaping characters and Strings in Java.
      source: Stack Overflow
      url: "http://stackoverflow.com/questions/tagged/escaping+java?sort=votes&pageSize=15"
    - text: "This video explains Java's escape character for inserting special characters into a String."
      source: YouTube
      url: "https://www.youtube.com/watch?v=Q4FCZYwFV_c"
  related: 
    - word: '\'
      reason: The beginning of any escape sequence.

- 
  word: ++
  display: "Incrementor"
  definition: "The increment operator, which tells the computer to add one to the variable."
  example: <code>n++</code> is the same as <code>n += 1</code> is the same as <code>n = n + 1</code>
  external:
    - text: "That plus-plus means take whatever value is stored in that variable and add 1."
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=5&lesson=19"
  related: 
    - word: <code>--</code>
      reason: The decrement operator

- 
  word: "--"
  display: "Decrementor"
  definition: "The decrement operator, which tells the computer to subtract one from the variable."
  example: <code>n--</code> is the same as <code>n -= 1</code> is the same as <code>n = n - 1</code>
  external:
    - text: "When we do <code>x--</code>, that's the same as taking x and subtracting 1."
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=5&lesson=19"
  related:
    - word: <code>++</code>
      reason: The increment operator

- 
  word: ++n
  display: "Prefix incrementor"
  definition: "An increment operator applied before the variable, or in prefix notation. This increments the variable (in this case, n) before we use it for other operations."
  example: "int x = 1; </br>int y = ++x;</br>y;</br>2</br>x;</br>2</br></br>Notice how the y variable takes on the already-incremented value of x? If we'd instead written x++, we'd end with y = 1 and x = 2."
  external:
  related:
    - word: <code>++</code>
      reason: The increment operator
    - word: <code>n++</code>
      reason: The increment operator in postfix notation.

- 
  word: "true"
  definition: "An example of a boolean, one of Java's primitive types. It stands in for true values."
  example:
  external:
  related:
    - word: "boolean"
      reason: "the primitive data type of this value in Java"
    - word: "Boolean"
      reason: "the Wrapper class Java uses to turn booleans into Objects"
- 
  word: "false"
  definition: "An example of a boolean, one of Java's primitive types. It stands in for false values."
  example:
  external:
  related:
    - word: "boolean"
      reason: "the primitive data type of this value in Java"
    - word: "Boolean"
      reason: "the Wrapper class Java uses to turn booleans into Objects"

- 
  word: final
  definition: "A keyword used to indicate a constant, or a variable that can't change. It's useful, but not necessary, to write these variable names with only capital letters."
  example: final double PI = 3.14159;</br>PI = 4.5 // illegal!
  external:
    - text: The final modifiers
      source: YouTube
      url: "https://www.youtube.com/watch?v=Y7J97fEQcro&list=PLDAA5DE54FB5215EC&index=28"
  related:
    - word: 
      reason:

- 
  word: fn-static
  definition: "A function that belongs to a <word data-key='class'>class</word> rather than a particular <word data-key='instance'>instance</word> of the class."
  example: Math.abs(-4);<br/>StringUtils.isEmpty(String text);<br/>String.valueOf(boolean b);
  external:
    - text: Java static variables and methods
      source: YouTube
      url: "https://www.youtube.com/watch?v=gTk_F61_-9k"
    - text: When to use static methods in Java
      source: StackOverflow
      url: "http://stackoverflow.com/questions/2671496/java-when-to-use-static-methods"
  related:
    - word: 
      reason:

- 
  word: public
  definition: "A Java keyword that means the variable, method, or class it describes is accessible from anywhere. Formally, public is called an <em>access control modifier</em> because it modifies access to the thing it describes."
  example: 
  external:
  related:
    - word: private
      reason: "another way of controlling access to a variable, method, or class."
    - word: protected
      reason: "another way of controlling access to a variable, method, or class."
    - word: "Package"
      reason: "another way of controlling access to a variable, method, or class."

- 
  word: private
  definition: "A Java keyword that means the variable, method, or class it describes is accessible only from within its own class."
  example: 
  external:
    - text: Member modifiers
      source: YouTube
      url: "https://www.youtube.com/watch?v=3M7bchRzawk&list=PLDAA5DE54FB5215EC&index=26"
  related:
    - word: "public"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "protected"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "Package"
      reason: "another way of controlling access to a variable, method, or class."

- 
  word: protected
  definition: "A Java keyword that means the variable, method, or class it describes is accessible from within its own class, its subclasses, or classes in the same package."
  example: 
  external:
    - text: Member modifiers
      source: YouTube
      url: "https://www.youtube.com/watch?v=3M7bchRzawk&list=PLDAA5DE54FB5215EC&index=26"
  related:
    - word: "public"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "private"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "Package"
      reason: "another way of controlling access to a variable, method, or class."

- 
  word: "Package"
  definition: "A Java keyword that means the variable, method, or class it describes is accessible from any class within the same package. This is the assumed access control level if nothing else is set, but you can't actaully set it yourself."
  example: 
  external:
  related:
    - word: "public"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "private"
      reason: "another way of controlling access to a variable, method, or class."
    - word: "protected"
      reason: "another way of controlling access to a variable, method, or class."

- 
  word: "/*"
  display: "Comments"
  definition: "Comments are notes you can leave in a program that the computer will ignore but might be useful to you or other programmers."
  example: "/*  I'm a one-line comment, and I won't be printed! */"
  external:
    - text: "Comments are ignored by the compiler but are useful to other programmers. The Java programming language supports three types of comments ..."
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/getStarted/application/index.html#COMMENTS"
    - text: "This video explains what Java comments are and how to use them."
      source: YouTube
      url: "https://www.youtube.com/watch?v=-AoHFnlJ1r4"
  related:
    - word: /**
      reason: "another way of starting off a comment in Java."
    - word: //
      reason: "another way of starting off a comment in Java."

- 
  word: "/**"
  display: "Comments"
  definition: "Comments are notes you can leave in a program that the computer will ignore but might be useful to you or other programmers."
  example: "/**</br> *I'm a multi-line comment, and I won't be printed!</br> */"
  external:
    - text: "Comments are ignored by the compiler but are useful to other programmers. The Java programming language supports three types of comments ..."
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/getStarted/application/index.html#COMMENTS"
    - text: "This video explains what Java comments are and how to use them."
      source: YouTube
      url: "https://www.youtube.com/watch?v=-AoHFnlJ1r4"
  related:
    - word: /*
      reason: "another way of starting off a comment in Java."
    - word: //
      reason: "another way of starting off a comment in Java."

- 
  word: "//"
  display: "Comments"
  definition: "Comments are notes you can leave in a program that the computer will ignore but might be useful to you or other programmers."
  succinct: 
    - text: "Leave a note in the code"
      example: "// I'm a one-line comment that won't be printed!"
      wrapper: "// $REPLACE"
  example: "//  I'm a one-line comment, and I won't be printed!"
  external:
    - text: "Comments are ignored by the compiler but are useful to other programmers. The Java programming language supports three types of comments ..."
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/getStarted/application/index.html#COMMENTS"
    - text: "This video explains what Java comments are and how to use them."
      source: YouTube
      url: "https://www.youtube.com/watch?v=-AoHFnlJ1r4"
  related:
    - word: /*
      reason: "another way of starting off a comment in Java."
    - word: /**
      reason: "another way of starting off a comment in Java."
- 
  word: "value"
  definition: "The data we're often working with when programming."
  example: '4<br />"Hello"<br />false</br>'
  external:
    - text: "In computer science, a value is an expression which cannot be evaluated any further."
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Value_(computer_science)"
  related:

- 
  word: "variable"
  definition: "A name that's used in programming to refer to a <word data-key='value'>value</word>"
  example: '<code>x</code> is the variable in <code>int x = 2;</code> <code>2</code> is the value.'
  external:
    - text: "In computer programming, a variable or scalar is a storage location and an associated symbolic name (an identifier) which contains some known or unknown quantity or information, a value."
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Variable_(computer_science)"
    - text: Introduction to variables
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/variables/p/intro-to-variables"
    - text: Introduction to types and variables in Java
      source: YouTube
      url: "https://www.youtube.com/watch?v=dVFr5TETfjY"
  related:

- 
  word: "variable-scope"
  display: Variable scope
  definition: "The way you talk about which variables different parts of a program can \"see\". Loops, conditionals, methods, and classes each have their own scope."
  example: "//The variable 'even' is scoped to the 'isEven' function\nboolean isEven(int num){\n\tboolean even = num % 2 == 0;\n\treturn even;\n}"
  external:
    - text: "The scope of an association of a name to an entity, such as a variable, is the part of a computer program where the binding is valid: where the name can be used to refer to the entity. "
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Scope_(computer_science)"
    - text: Local and global variables
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/functions/p/local-and-global-variables"
    - text: Introduction to variable scope in Java
      source: YouTube
      url: "https://www.youtube.com/watch?v=Y2iN3TO5qOQ"
  related:

- 
  word: "for"
  display: "for loop"
  definition: "A way to tell your program to repeatedly run some code a certain number of times."
  example: 'for(int i = 0; i < 5; i++){<br />&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("i is " + i);<br />}<br/><br/>// i is 0<br/>// i is 1<br/>// i is 2<br/>// i is 3<br/>// i is 4'
  succinct:
    - text: A way to repeat the running of some code a set number of times.
      example: "for(int i = 0; i < 5; i++){\n\tSystem.out.println(\"i is \" + i);\n}"
      wrapper: "for(int i = 0; i < 5; i++){\n\t$REPLACE\n}"
  external:
    - text: "For loops in computer science"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/For_loop"
    - text: "For loop tutorial (in JavaScript)"
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/looping/p/for-loops-a-new-kind-of-loop"
    - text: How to use a for loop
      source: YouTube
      url: "https://www.youtube.com/watch?v=rjkYAs6gAkk"
  related:
    - word: while
      reason: "Another way to repeat code without retyping it"
- 
  word: "while"
  display: "while loop"
  definition: "A way to tell your program to do something (probably run some code) <em>while</em> something else is true."
  example: "int x = 5;<br/>while(x > 1){<br />&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(x);<br />&nbsp;&nbsp;&nbsp;&nbsp;x--;<br />}<br/>// Prints 5 4 3 2"
  succinct:
    - text: A way to repeat the running of some code a set number of times.
      example: "int wallet = 100;\nwhile(wallet > 0){\n\twallet -= 25;\n\tSystem.out.println(\"Spent another $25\");\n}\nSystem.out.println(\"No more money left!\");"
      wrapper: "while(true){\n\t$REPLACE\n}"
  external:
    - text: "Stepping through a while loop visually"
      source: Amjad Masad's blog
      url: "http://amasad.me/2014/01/10/implementing-bret-victors-learnable-programming-has-never-been-easier/"
    - text: "Intro to while loops (in JavaScript)"
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/looping/p/intro-to-while-loops"
    - text: How to use a while loop
      source: YouTube
      url: "https://www.youtube.com/watch?v=65HhbCO05qk"
  related:
    - word: for
      reason: "Another way to repeat code without retyping it"
- 
  word: "if-else"
  display: "If statement"
  definition: "A way to write code where some of it is executed <em>if</em> something else is true; otherwise (<em>else</em>), different code runs."
  succinct:
    - text: A way to run some code if something is true or run different code if the thing's not true.
      example: "if(2 == 2){\n\tSystem.out.println(\"I'll print!\");\n}else{\n\tSystem.out.println(\"I won't print!\");\n}"
      wrapper: "if(2 == 2){\n\t$REPLACE\n}"
  example: "if(2 == 2){<br />&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"I'll print!\");<br />}else{<br/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"I won't print!\")<br/>};"
  external:
    - text: "If statements in computer programming"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/If_statement#C-like_languages"
    - text: "Logic and if statements"
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/logic-if-statements/p/if-statements"
    - text: If statement walk-through
      source: YouTube
      url: "https://www.youtube.com/watch?v=iMeaovDbgkQ"
  related:

- 
  word: "primitive"
  definition: 'A basic data type, provided by Java, as a "building block" to make more complicated objects.'
  example: "int i<br />double d<br />boolean b"
  external:
    - text: "A primitive data type is either a basic data type, provided by the programming language or a built-in data type, for which the language provides built-in support. A basic data type can be built-in to a language."
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Primitive_data_type"
    - text: Understanding Java Primitive data types
      source: YouTube
      url: "https://www.youtube.com/watch?v=EC7MfpwQAfY"
  related:
    - word: boolean
      reason: "One of Java's primitive data types"
    - word: int
      reason: "One of Java's primitive data types"
    - word: double
      reason: "One of Java's primitive data types"
- 
  word: "object"
  definition: 'A collection of data, bundled together, often designed to mimic "things" in the world around you.'
  example: "class Book{\n\tString title;\n\tString author;\n\n\tBook(String titleFromuser, authorFromuser){\n\t\tthis.title = titleFromuser;\n\t\tthis.author = authorFromuser;\n\t}\n\n\tpublic static void main(String[] args){\n\t\t//Make a book - that's your object\n\t\tBook b = new Book(\"Alice in Wonderland\", \"Lewis Carroll\");\n\t}\n}"
  external:
    - text: "In computer science, an object can be a variable, function, or data structure. "
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Object_(computer_science)"
    - text: Introduction to objects
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/cs/programming/objects/p/intro-to-objects"
    - text: Working with objects in Java
      source: YouTube
      url: https://www.youtube.com/watch?v=NKKqtu1Be2g
  related:
    - word: Class
      reason: "A tool to define what sort of object you're creating"
    - word: String
      reason: "All Strings are objects in Java."
    - word: Wrapper class
      reason: "A special type of class, provided by Java, to convert primitives to Objects."
- 
  word: "StringIndexOutOfBoundsException"
  definition: "An exception (error) that happens when Java tries to access an index that doesn't exist in a String. Often this happens when the index is negative or greater than the string's length."
  example: 'String s = "hello";<br />s.charAt(494); // results in a StringIndexOutOfBoundsException'
  external:
    - text: "Official documentation for the StringIndexOutOfBoundsException"
      source: Java Documentation
      url: "http://docs.oracle.com/javase/7/docs/api/java/lang/StringIndexOutOfBoundsException.html"
    - text: Popular questions related to StringIndexOutOfBoundsExceptions
      source: Stack Overflow
      url: "http://stackoverflow.com/search?tab=votes&q=stringindexoutofboundsexception"
  related:
    - word: Exception
      reason: "The general Java class for exceptions, or errors"
- 
  word: "immutable"
  definition: "Unable to be changed. Often applied to <word>Objects</word> to convey that they can't be changed after they've been constructed."
  example:
  external:
    - text: "Official definition of immutable objects for Java"
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/essential/concurrency/immutable.html"
    - text: A tutotrial about immutable objects
      source: YouTube
      url: "https://www.youtube.com/watch?v=NmamgSdVwlA"
    - text: "Is a Java string really immutable? [advanced]"
      source: Stack Overflow
      url: http://stackoverflow.com/questions/20945049/is-a-java-string-really-immutable
  related:

- 
  word: "autoboxing"
  definition: "The name for the Java compiler's automatic converstion between primitvie data types and their corresponding <word>Wrapper classes</word>."
  example: <code>Integer i = 5;</code>
  external:
    - text: "Autoboxing and unboxing"
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/java/data/autoboxing.html"
    - text: Autoboxing and unboxing in Java
      source: YouTube
      url: "https://www.youtube.com/watch?v=P_k2bz-EoJg"
    - text: "Common questions related to autoboxing"
      source: Stack Overflow
      url: http://stackoverflow.com/search?q=autoboxing+score%3A10
  related:

- 
  word: "cipher"
  definition: "Any form of cryptographic substitution in which each letter is replaced by another letter or symbol."
  example: 
  external:
    - text: "Ciphers"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Cipher"
    - text: "Cryptography 101: Substitution Ciphers"
      source: YouTube
      url: "https://www.youtube.com/watch?v=1P8Xpxm76e8"
  related:
    - word: Caesar shift
      reason: "A specific type of cipher that may have been first used by Julius Caesar."

- 
  word: "caesar-shift"
  definition: "A simple subtitution cipher in which each letter in a message is replaced by a letter some fixed number of positions down the alphabet"
  example: "With a Caesar shift of 4, <code>HELLO</code> becomes <code>LIPPS</code>"
  external:
    - text: "Caesar cipher"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Caesar_cipher"
    - text: Caesar shift codes
      source: YouTube
      url: "https://www.youtube.com/watch?v=1D3MHzcExGU"
  related:
    - word: cipher
      reason: "The term we use for any sort of crypotgraphic substitution."

- 
  word: "numerator"
  definition: "The number above the line (or before the slash) in a fraction"
  example: "The 1 in 1/4"
  external:
    - text: "Fractions in math"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Fraction_(mathematics)"
    - text: Fraction parts
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/fractions/understanding_fractions/v/identifying-fraction-parts"
  related:
    - word: denominator
      reason: "The other (bottom) part of a fraction."

- 
  word: "denominator"
  definition: "The number below the line (or after the slash) in a fraction"
  example: "The 4 in 1/4"
  external:
    - text: "Fractions in math"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Fraction_(mathematics)"
    - text: Fraction parts
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/fractions/understanding_fractions/v/identifying-fraction-parts"
  related:
    - word: numerator
      reason: "The other (top) part of a fraction."

- 
  word: "pseudo-random"
  definition: "Sometimes when we're programming, we want to use random numbers. But computers are so deterministic that they can't come up with truely random numbers, so &ldqo;pseudo-random&rdquo; is what we call numbers that <em>seem</em> random, since they lack a pattern. They're not actually random though – computer wouldn't know how to do that."
  example: "30, 45, 47, 97, 17, 2, 26, 56, 51, 5"
  external:
    - text: "Pseduorandomness"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Pseudorandomness"
    - text: Pseudo-random number generators
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/computer-science/cryptography/crypt/v/random-vs--pseudorandom-number-generators"
  related:
    - word: random
      reason: "The name of the Java class that generates random numbers"

- 
  word: "random"
  definition: "The word 'random' means chosen without method or concious decision. Java has a built-in <code>Random</code> class that'll give you random numbers."
  example: "Random dice = new Random();<br/>int roll = dice.nextInt(6) + 1;<br/>// roll is a whole number between 1 and 6, inclusive."
  external:
    - text: "Random numbers in Java"
      source: YouTube
      url: "https://www.youtube.com/watch?v=AhwIYAXPASw"
    - text: Introduction to random variables
      source: Khan Academy
      url: "https://www.khanacademy.org/math/probability/random-variables-topic/random_variables_prob_dist/v/random-variables"
  related:
    - word: Pseudo-random
      reason: "Computers can't actually be random, so we call the \"random\" numbers they return pseudo-random."

- 
  word: "random-int"
  display: "Next random integer"
  definition: Ask Java to return a random <word data-key="int">integer</word> from a range of numbers.
  succinct: 
    - text: A tool built into Java you can use to get random integers
      example: "Random gen = new Random();\nint chosen = gen.nextInt(5);"
  example: "Random gen = new Random();\nint chosen = gen.nextInt(5);\n// chosen will be 0, 1, 2, 3 or 4"
  related:
    - word: Random
      reason: "The name of the Java class that generates random numbers"
    - word: random-double
      reason: "The Java method that will generate a random double"

- 
  word: "random-double"
  display: "Next random double"
  definition: Ask Java to return a random <word data-key="double">double</word> between 0 (included) and 1 (excluded.)
  succinct: 
    - text: "A tool built into Java you can use to get a random double such that <code>0 <= double < 1</code>"
      example: "Random gen = new Random();\ndouble d = gen.nextDouble();"
  example: "Random gen = new Random();\nint d = gen.nextDouble();\n// d will be 0 <= d < 1"
  related:
    - word: Random
      reason: "The name of the Java class that generates random numbers"
    - word: random-int
      reason: "The Java method that will generate a random integer"

- 
  word: "DialogProgram"
  definition: "A class we've written to make it easier to get input from a user for your program."
  example:
  external:
    - text: "Window.prompt in Javascript – how we're implementing the dialog behind the scenes"
      source: Mozilla Developer Network
      url: "https://developer.mozilla.org/en-US/docs/Web/API/Window.prompt"
    - text: ACM library's DialogProgram class – what this DialogProgram is based off of
      source: Java Documentation
      url: "http://cs.stanford.edu/people/eroberts/jtf/javadoc/student/acm/program/DialogProgram.html"
  related:
    - word: extends
      reason: "The programs we write extend, or inherit from, DialogProgram"

- 
  word: read-string
  display: "Get a String from the user"
  definition: An easy way to get text from the user. (Only works within this site – this isn't standard Java.)
  succinct:
    - text: An easy way to get text from the user. (Only works within this site – this isn't standard Java.)
      example: 'String statement = readString("What do you think?");'
      wrapper: "String fromUser = readString($REPLACE);"
  example: 'String statement = readString("What do you think?");'
  external:
  related:

- 
  word: read-int
  display: "Get an int from the user"
  definition: An easy way to get text from the user. (Only works within this site – this isn't standard Java.)
  succinct:
    - text: An easy way to get an integer from the user. (Only works within this site – this isn't standard Java.)
      example: "int fav = readInt(\"What is your favorite number?\");"
      wrapper: "int fromUser = readInt($REPLACE);" 
  example: "int fav = readInt(\"What is your favorite number?\");"
  external:
  related:

- 
  word: "print"
  definition: "How we get output to display on the screen. We can print <word data-key=\"int\">ints</word>, <word data-key=\"double\">doubles</word>, <word data-key=\"boolean\">booleans</word>, or <word data-key=\"string\">Strings</word>."
  succinct:
    - text: "The command that gets the program to print text on the screen."
      example: 'System.out.println("Hello!");'
      wrapper: "System.out.println($REPLACE);"
  example: System.out.println("Yo!"); // prints "Yo!"<br/>System.out.println(1 + 3);   // prints 4<br/>System.out.println(4 == 2 +2); // prints true
  external:
    - text: "Difference between print and println"
      source: YouTube
      url: "https://www.youtube.com/watch?v=JWqKqr6i9mo"
    - text: Introduction to println
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=5"
  related:
    - word: toString
      reason: "A sneaky way to print objects"

- 
  word: "+"
  display: "Addition"
  definition: "The + symbol will add two numbers (<word data-key=\"int\">ints</word> or <word data-key=\"double\">doubles</word>) or words (<word data-key=\"string\">Strings</word>) together."
  succinct:
    - text: "The process of adding together numbers or strings."
      example: "+"
  example: 2 + 2; // returns 4<br/>"Hi" + " there";   // returns "Hi there"
  external:
    - text: "Addition"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Addition"
    - text: Basic addition
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/addition-subtraction/basic_addition/v/basic-addition"
  related:
    - word: "-"
      reason: "The symbol used for subtraction"
    - word: "*"
      reason: "The symbol used for multiplication"
    - word: "/"
      reason: "The symbol used for division"
    - word: "%"
      reason: "The symbol used for modular arithmetic"

- 
  word: "-"
  display: "Subtraction"
  definition: "The - symbol will subtract two numbers (<word data-key=\"int\">ints</word> or <word data-key=\"double\">doubles</word>)."
  succinct:
    - text: "The process of subtracting numbers."
      example: "-"
  example: 2 - 2; // returns 0<br/>10.5 - 0.25";   // returns 10.25
  external:
    - text: "Subtraction"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Subtraction"
    - text: Basic subtraction
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/addition-subtraction/basic_addition/v/basic-subtraction"
  related:
    - word: "+"
      reason: "The symbol used for addition"
    - word: "*"
      reason: "The symbol used for multiplication"
    - word: "/"
      reason: "The symbol used for division"
    - word: "%"
      reason: "The symbol used for modular arithmetic"

- 
  word: "*"
  display: "Multiplication"
  definition: "The * symbol will multiply two numbers (<word data-key=\"int\">ints</word> or <word data-key=\"double\">doubles</word>)."
  succinct:
    - text: "The process of multiplying numbers."
      example: "*"
  example: 2 * 2; // returns 4<br/>10.0  * 0.25";   // returns 2.5
  external:
    - text: "Multiplication"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Multiplication"
    - text: Basic multiplication
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/multiplication-division/multiplication_fun/v/number-line-1"
  related:
    - word: "+"
      reason: "The symbol used for addition"
    - word: "-"
      reason: "The symbol used for subtraction"
    - word: "/"
      reason: "The symbol used for division"
    - word: "%"
      reason: "The symbol used for modular arithmetic"

- 
  word: "/"
  display: "Division"
  definition: "The / symbol will divide two numbers (<word data-key=\"int\">ints</word> or <word data-key=\"double\">doubles</word>)."
  succinct:
    - text: "The process of dividing numbers."
      example: "/"
  example: 5 / 2; // returns 2 (integer division!)<br/>5.0 / 2;   // returns 2.5
  external:
    - text: "Division"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Division"
    - text: One-digit division
      source: Khan Academy
      url: "https://www.khanacademy.org/math/arithmetic/multiplication-division/delightful_division/e/division_0.5"
    - text: Integer Division
      source: Wolfram MathWorld
      url: http://mathworld.wolfram.com/IntegerDivision.html
  related:
    - word: "+"
      reason: "The symbol used for addition"
    - word: "-"
      reason: "The symbol used for subtraction"
    - word: "*"
      reason: "The symbol used for multiplication"
    - word: "%"
      reason: "The symbol used for modular arithmetic"

- 
  word: "%"
  display: "Modulus"
  definition: "The symbol we use to modulo two numbers (<word data-key=\"int\">ints</word> or <word data-key=\"double\">doubles</word>)."
  succinct:
    - text: "The process of adding when numbers \"wrap around\", as clocks do after 12 hours."
      example: "%"
  example: 5 % 2; // returns 2<br/>2 % 2;   // returns 0
  external:
    - text: "Modular arithmetic"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Modular_arithmetic"
    - text: An introduction to modular math
      source: Khan Academy
      url: "https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic"
    - text: Modular arithmetic
      source: Wolfram MathWorld
      url: http://mathworld.wolfram.com/ModularArithmetic.html
  related:
    - word: "+"
      reason: "The symbol used for addition"
    - word: "-"
      reason: "The symbol used for subtraction"
    - word: "*"
      reason: "The symbol used for multiplication"
    - word: "/"
      reason: "The symbol used for division"

- 
  word: "()"
  display: "Parentheses"
  definition: "The symbol used to group together parts of a larger expression, which can change the way the expression is evaluated."
  succinct: 
    - text: "Symbols used to group together parts of a larger expression: ()"
      example: "()"
      wrapper: "($REPLACE)"
  example: (5 + 5) / 2.0; // returns 10.0<br/> 5 + 5/2.0";   // returns 7.5
  external:
    - text: Expressions with parentheses
      source: Khan Academy
      url: "https://www.khanacademy.org/math/cc-fifth-grade-math/cc-5th-algebraic-thinking/cc-5th-writing-expressions-tut/e/expressions-with-parentheses"      
    - text: Parenthesis
      source: Wolfram MathWorld
      url: http://mathworld.wolfram.com/Parenthesis.html
    - text: Introduction to the order of operations
      source: Khan Academy
      url: https://www.khanacademy.org/math/cc-sixth-grade-math/cc-6th-expressions-and-variables/cc-6th-order-operations/v/introduction-to-order-of-operations
  related:

- 
  word: "int-division"
  display: "Integer division"
  definition: "Integer division is a special kind of division in which all answers are integers (whole numbers), and any decimals are dropped."
  succinct:
    - text: "The process of dividing whole numbers and returning whole-number answers."
      example: "3 / 4  // = 0"
  example: 4 / 2; // = 2<br/>5 / 2; // = 2<br/>6 / 2; // = 4<br/>7 / 2; // = 3
  external:
    - text: "Division"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Division"
    - text: Integer Division
      source: Wolfram MathWorld
      url: http://mathworld.wolfram.com/IntegerDivision.html
  related:
    - word: "/"
      reason: "The symbol used for division"

- 
  word: math-sqrt
  display: "Square roots"
  definition: A function in the Math class that returns the square root of its argument.
  succinct:
    - text: Takes the square root of a number
      example: "Math.sqrt(16); // returns 4"
      wrapper: "Math.sqrt($REPLACE);"
  example: Math.sqrt(16);   // returns 4
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-pow
  display: "Powers"
  definition: A function in the Math class that raises one argument to the power of the other
  succinct:
    - text: Takes one number to the power of another
      example: "Math.pow(2, 4); // returns 16"
  example: "Math.pow(2, 4);   // returns 16"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-abs
  display: "Absolute value"
  definition: A function in the Math class that returns the absolute value of the argument
  succinct:
    - text: Gives the absolute value of a number
      example: "Math.abs(-16);  // returns 16"
      wrapper: "Math.abs($REPLACE);"
  example: "Math.abs(-16);   // returns 16<br/>Math.abs(98.8);   // returns 98.8"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-min
  display: "Find min of two numbers"
  definition: A function in the Math class that returns the smaller of a pair of values.
  succinct:
    - text: Gives the smaller of a pair of values
      example: "Math.min(4, 2); // returns 2"
  example: "Math.min(-2.01,-5.4);   // returns -5.4<br/>Math.min(4, 2);   // returns 2"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-max
  display: "Find max of two numbers"
  definition: A function in the Math class that returns the larger of a pair of values.
  succinct:
    - text: Gives the larger of a pair of values
      example: "Math.max(4, 2);   // returns 4"
  example: "Math.max(-2.01,-5.4);   // returns -2.01<br/>Math.max(4, 2);   // returns 4"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-round
  display: "Round a number"
  definition: "A function in the Math class that returns the closest integer to the argument, with ties rounding up."
  succinct:
    - text: Gives the closest integer to a value
      example: "Math.round(4.222);   // returns 4"
      wrapper: "Math.round($REPLACE);"
  example: "Math.round(4.222);   // returns 4<br/>Math.round(-2.444);   // returns -2"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-round-floor
  display: "Round a number down"
  definition: "A function in the Math class that returns the closest integer less than the argument."
  succinct:
    - text: Gives the closest integer lower than a value
      example: "Math.floor(4.722);   // returns 4"
      wrapper: "Math.floor($REPLACE);"
  example: "Math.floor(4.722);   // returns 4<br/>Math.floor(-2.444);   // returns -3"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-round-ceil
  display: "Round a number up"
  definition: "A function in the Math class that returns the closest integer less than the argument."
  succinct:
    - text: Gives the closest integer higher than a value
      example: "Math.ceil(4.222);   // returns 5"
      wrapper: "Math.ceil($REPLACE);"
  example: "Math.ceil(4.222);   // returns 5<br/>Math.ceil(-2.444);   // returns -2"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
  related:

- 
  word: math-e
  display: "e, the base of natural logarithms"
  definition: "A constant in the Math class that returns the base of natural logarithms."
  succinct:
    - text: "Gives e, the base of natural logarithms"
      example: "Math.E;   // 2.71828"
  example: "Math.E;   // 2.71828"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
    - text: Natural logarithm
      source: Wikipedia
      url: http://en.wikipedia.org/wiki/Natural_logarithm
    - text: E (mathematical constant)
      source: Wikipedia
      url: http://en.wikipedia.org/wiki/E_(mathematical_constant)
  related:

- 
  word: math-pi
  display: "pi, the ratio of a circle's circumfrence to its diameter"
  definition: "A constant in the Math class that returns Pi."
  succinct:
    - text: "Gives pi, the ratio of a circle's circumfrence to its diameter"
      example: "Math.PI;   // 3.141592653589793"
  example: "Math.PI;   // 3.141592653589793"
  external:
    - text: Math class documentation
      source: Oracle's Java documentation
      url: http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
    - text: Pi
      source: Wikipedia
      url: http://en.wikipedia.org/wiki/Pi
  related:

- 
  word: _return
  display: "return"
  definition: "A keyword that tells a method to end. If there's a variable or value on the same line as the return, it's sent back to whoever called the method."
  succinct:
    - text: Ends the method and sends back whatever else is on the line (if anything.)
      example: "return \"Send me back!\";"
      wrapper: "return $REPLACE;"
  example: "return;   // ends the method<br/>return x;   // ends method, sends back x"
  external:
    - text: Returning a variable from a method
      source: Java Documentation
      url: http://docs.oracle.com/javase/tutorial/java/javaOO/returnvalue.html
  related:

- 
  word: "instance"
  definition: "Variables available to all objects created of the class. You might also see them refered to as <em>state variables</em> or <em>data members</em>."
  example: "int bills[] = {1, 2, 5, 10, 20, 50, 100};<br/>bills.length;     // Returns 7"
  external:
    - text: "Scope of instance variables"
      source: YouTube
      url: "https://www.youtube.com/watch?v=ho6GNz6u4U0"
    - text: Static versus instance variables
      source: Amplify
      url: "https://course-mooc.amplify.com/unit?unit=56&lesson=208"
  related:
    - word: toString
      reason: "A sneaky way to print objects"

- 
  word: "REPL"
  definition: "Read-eval print loop, a tool that makes it easier to interact with Java: you can type Java commands into a REPL, and when you press 'Enter', they'll run – no need to compile an entire program."
  example:
  external:
    - text: "REPLs in other programming languages"
      source: Repl.it
      url: "http://repl.it/"
    - text: REPL
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop"
  related:

- 
  word: "Execute"
  definition: "What we call asking the computer to go through a program, line by line, and evaluate each piece."
  example:
  external:
    - text: "Executables – much more on terms related to running programs"
      source: Search security
      url: "http://searchsecurity.techtarget.com/definition/executable"
  related:

- 
  word: "indeterminate"
  definition: "Not exactly known or defined. Indefinite."
  example: 
  external:
  related:

- 
  word: "&&"
  definition: "Logical 'and' operator, and a way to join two logical clauses"
  succinct:
        - text: "Logical 'and'"
          example: "&&"
  example: "true && false;\t//returns false\ntrue && true;\t//true"
  external:
  related:

- 
  word: "||"
  definition: "Logical 'or' operator, and a way to join two logical clauses"
  succinct:
        - text: "Logical 'or'"
          example: "||"
  example: "true || false;\t//true"
  external:
  related:

- 
  word: "!"
  definition: "Logical 'not' operator, and a way to negate a clause"
  succinct:
        - text: "Logical 'not'"
          example: "!"
  example: "!true //\tfalse;"
  external:
  related:

- 
  word: "=="
  definition: "Logical equivalence operator, or a way to say two things are equivalent to one another."
  succinct:
        - text: "Tests for equivalence"
          example: "2 == 2;\t//true"
  example: "2 == 2;\t//true"
  external:
  related:

- 
  word: "!="
  definition: "Logical inequivalence operator, or a way to say two things are inequivalent to one another."
  succinct:
        - text: "Tests for inequivalence"
          example: "2 != 2;\t//false"
  example: "2 != 2;\t//false"
  external:
  related:

- 
  word: ">"
  definition: "Logical operator to express one thing being \"greater than\" something else."
  succinct:
        - text: "Tests for a \"greater than\" relationship"
          example: "2 > 1;\t//true"
  example: "2 > 1;\t//true"
  external:
  related:

- 
  word: "<"
  definition: "Logical operator to express one thing being \"less than\" something else."
  succinct:
        - text: "Tests for a \"less than\" relationship"
          example: "2 < 5;\t//true"
  example: "2 < 5;\t//true"
  external:
  related:

- 
  word: "<="
  definition: "Logical operator to express one thing being \"less than or equal to\" something else."
  succinct:
        - text: "Tests for a \"less than or equal to\" relationship"
          example: "2 <= 2;\t//true"
  example: "2 <= 2;\t//true"
  external:
  related:

- 
  word: ">="
  definition: "Logical operator to express one thing being \"greater than or equal to\" something else."
  succinct:
        - text: "Tests for a \"greater than or equal to\" relationship"
          example: "5 >= 5;\t//true"
  example: "5 >= 5;\t//true"
  external:
  related:


- 
  word: "str-indices"
  display: "charAt (Strings)"
  definition: "<p>Strings are made up of characters, or what Java calls <word data-key=\"char\">char</word>s. A string's characters are numbered from left to right, starting with 0.</p>"
  succinct:
        - text: "Pulls out a single character from a string by its position"
          example: "\"Hello\".charAt(0);"
  example: <table class="table"><tbody><tr><td><strong>Character</strong></td><td>M</td><td>y</td><td> </td><td>p</td><td>h</td><td>o</td><td>n</td><td>e</td></tr><tr><td><strong>Index</strong></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr></tbody></table>
  external:
  related:

- 
  word: "str-replace"
  display: "replace (Strings)"
  definition: "<p>The <code>replace(target, replacement)</code> <word data-key=\"replace\">method</word> will replace all the <code>target</code> characters with <code>replacement</code> characters in a String.</p>"
  succinct:
        - text: "A method to replace certain characters in a String with other characters."
          example: "\"Hello\".replace(\"ll\", \"mm\");\t//\"Hemmo\""
  example: "\"Hello\".replace(\"ll\", \"mm\")\t//\"Hemmo\""
  external:
  related:

- 
  word: "str-concat"
  display: "Concatenate"
  definition: "<p>Concatenating, or adding, two strings \"glues\" one on to the other.</p><p>If you'd like spaces in between the words, you'll have to add them manually – Java doesn't do that on its own.</p>"
  succinct:
        - text: "Adds, or concatenates, one string on to another."
          example: "\"Hello\" + \" there!\";"
  example: "\"Hello\" + \"there!\";\n//\"Hellothere!\"\n\"Hello\" + \" there!\";\t//\"Hello there!\""
  external:
  related:

- 
  word: "str-length"
  display: "String length"
  definition: "The length method will count the number of characters, including spaces, in a string."
  succinct:
        - text: "Counts the number of characters, including spaces, in a string."
          example: "\"Measure me\".length();\t//10"
  example: "\"Measure me\".length();\t//10"
  external:
  related:

- 
  word: "str-substring"
  display: "substring"
  definition: "<p><code>str.substring(int startIndex, int stopIndex)</code> will pull out the characters of <code>str</code> from <code>startIndex</code> to just before <code>stopIndex</code>.</p><p>If <code>stopIndex</code> isn't provided, the substring will run to the String's <word data-key=\"str-length\">end</word>.</p>"
  succinct:
        - text: "A method to help you pick out a piece of a larger string."
          example: "\"Hello\".substring(1, 4); //\"ell\""
  example: "\"Hello\".substring(3); //\"lo\"\n\"Hello\".substring(1, 4); //\"ell\""
  external:
  related:

- 
  word: "str-compare-to"
  display: "String comparisons"
  definition: "<p>Compares two strings and returns a number indicating which String is first in a <word data-key=\"lexigraphic\">lexigraphic ordering</word>.</p><p><code>str1.compareTo(str2)</code> returns <code>0</code> if the two strings are equal, a negative number if <code>str1</code> is larger, and a positive number if <code>str2</code> is larger.</p>"
  succinct:
        - text: "Compares two strings and returns a number indicating which String is first in a <word data-key=\"lexigraphic\">lexigraphic ordering</word>."
          example: "\"Hello\".compareTo(\"hello\");"
  example: "String mTitle = \"Jessica\";<br/>String mLower = \"jessica\";<br/>String sTitle = \"Stephanie\";<br/>String cTitle = \"Amy\";<br/><br/>mTitle.compareTo(mTitle);<br/>0<br/>mTitle.compareTo(mLower);<br/>-32<br/>mLower.compareTo(mTitle);<br/>32<br/>cTitle.compareTo(mTitle);<br/>-9<br/>cTitle.compareTo(mLower);<br/>-41<br/>sTitle.compareTo(mTitle);<br/>9<br/>sTitle.compareTo(mLower);<br/>-23"
  external:
  related:
    - word: "str-lowercase"
      reason: "A method to convert all the string's characters to lowercase letters."

- 
  word: "lexigraphic"
  definition: "<p>A generalized form of alphabetic ordering, in which all the uppercase letters come before all the lowercase letters. (But within the same case, alphabetical ordering holds. <word data-key=\"string\">String</word> comparison functions use lexigraphical ordering."
  succinct:
        - text: "Alphabetic ordering that considers the case of each letter."
          example: "A, B, C ... X, Y, Z, a, b, c, ... x, y, z"
  example: "A, B, C ... X, Y, Z, a, b, c, ... x, y, z"
  external:
    - text: "Lexigraphical order explanation"
      source: Wikipedia
      url: "http://en.wikipedia.org/wiki/Lexicographical_order"
    - text: "Lexigraphic order, defined with more math"
      source: WolframMathWorld
      url: http://mathworld.wolfram.com/LexicographicOrder.html
    - text: String comparisons in Java
      source: StackOverflow
      url: http://stackoverflow.com/questions/4064633/string-comparison-in-java
  related:
    - word: "str-compare-to"
      reason: "By default, String comparisons happen through lexigraphic comparison."

-
  word: str-indexof
  display: "indexOf (String)"
  definition: "Looks up whether a string contains another string. If the target string's found, this function will return the index of its first character inside the larger string; if it's not, it'll return <code>-1</code>."
  succinct:
        - text: "Looks up whether a string contains another string. If the target string's found, this function will return the index of its first character inside the larger string; if it's not, it'll return <code>-1</code>."
          example: "\"Hello world!\".indexOf(\"world\");\t//Returns 6"
  example: "String str = \"Hello world!\";<br/><br/>str.indexOf(\"World\");&nbsp;&nbsp;&nbsp;&nbsp;//-1<br/>str.indexOf(\"world\");&nbsp;&nbsp;&nbsp;&nbsp;//7<br/>str.indexOf(\"world\", 10)&nbsp;&nbsp;&nbsp;&nbsp;//-1<br/>str.indexOf(\"hi\");&nbsp;&nbsp;&nbsp;&nbsp;//-1<br/>str.indexOf(\"Hello world!\");&nbsp;&nbsp;&nbsp;&nbsp;//0<br/>str.indexOf(\"!\", 10)&nbsp;&nbsp;&nbsp;&nbsp;//12"
  external:
    - text: Guide to manipulate characters in a string
      source: Java Documentation
      url: 'http://docs.oracle.com/javase/tutorial/java/data/manipstrings.html'
  related:
    - word:
      reason:
- 
  word: "str-uppercase"
  display: "uppercase"
  definition: "Convert all the string's characters to uppercase (capital) letters."
  succinct:
        - text: "Converts the string's characters to uppercase (capital) letters."
          example: "\"Hello\".toUpperCase();\t//\"HELLO\""
  example: "\"Hello\".toUpperCase();\t//\"HELLO\""
  external:
  related:
    - word: "str-lowercase"
      reason: "A method to convert all the string's characters to lowercase letters."

- 
  word: "str-lowercase"
  display: "lowercase"
  definition: "Convert all the string's characters to lowercase letters."
  succinct:
        - text: "Converts the string's characters to lowercase letters."
          example: "\"Hello\".toLowerCase();\t//\"hello\""
  example: "\"Hello\".toLowerCase();\t//\"hello\""
  external:
  related:
    - word: "str-uppercase"
      reason: "A method to convert all the string's characters to uppercase (capital) letters."

#FIXME FIXME INCOMPLETE
- 
  word: "class"
  definition: "The blueprint, or cookie cutter, you can use to create a new object."
  succinct:
        - text: "The blueprint, or cookie cutter, you can use to create a new object."
          example: "class Book{\n\tString title;\n\tString author;\n\n\tBook(String titleFromuser, String authorFromuser){\n\t\tthis.title = titleFromuser;\n\t\tthis.author = authorFromuser;\n\t}\n\n\tpublic static void main(String[] args){\n\t\t//Make a book!\n\t\tBook b = new Book(\"Alice in Wonderland\", \"Lewis Carroll\");\n\t}\n}"
  example: "class Book{\n\tString title;\n\tString author;\n\n\tBook(String titleFromuser, authorFromuser){\n\t\tthis.title = titleFromuser;\n\t\tthis.author = authorFromuser;\n\t}\n\n\tpublic static void main(String[] args){\n\t\t//Make a book!\n\t\tBook b = new Book(\"Alice in Wonderland\", \"Lewis Carroll\");\n\t}\n}"
  external:
  related:

- 
  word: "function"
  definition: "A subprogram of your program that can use data and return a value"
  succinct:
        - text: "A subprogram of your program that can use data and return a value"
          example: "int addTwo(int x){\n\treturn x + 2;\n}"
  example: "int addTwo(int x){\n\treturn x + 2;\n}"
  external:
  related:

- 
  word: "classes-main"
  display: "main function"
  definition: "The method your Java program must have in order to run other methods."
  succinct:
        - text: "The first and only method Java runs by default in your program; this method should call your other methods."
          example: "public static void main(String[] args){\n\t//Your program here\n}"
  example: "public static void main(String[] args){\n\t//Your program here\n}"
  external:
    - text: Getting started with your first Java application
      source: Java Documentation
      url: "http://docs.oracle.com/javase/tutorial/getStarted/application/"
  related:

- 
  word: "repl-help"
  display: "REPL help"
  definition: "<p>Above is a <word data-key='repl'>REPL</word>, or read-eval print loop.</p><p>It's an easy way to interact with Java: you can type Java commands into the REPL, and when you press 'Enter', they'll run.</p><p>REPLs let you test a single Java command without compiling and running an entire program.</p><p>Professional programmers use them all the time – even when they've been programming in a language for years.</p>"
  succinct:
        - text:
          example:
  example:
  external:
  related:

-
  word: NaN
  definition: "<code>NaN</code> stands for \"not a number,\" and it's what Java returns when a value isn't defined. You'll run into <code>NaN</code> if you try to do something that's mathematically illegal, like divide by 0."
  example:
  succinct:
        - text:
          example:
  external:
  related: 

-
  word: Java
  definition: "Java is a computer language that a now-defunct Silicon Valley company called Sun Microsystems first released in 1995. Like a spoken language, Java has its own vocabulary and syntax.</p><p>Java is based on English so, if you can read English, you can read Java. Its syntax rules are pickier though; it expects every statement to end with a `;` and all parens (`(` and `)`) and brackets (`{` and `}`) must match. Other computer languages aren't this demanding.</p><p>The programmers who wrote Java might say these strict rules make it easier to write legible word and spot errors. Other people think it's just tedious. We'll let you decide how you like Java's syntax rules."
  succinct:
        - text:
          example:
  example:
  external:
        - text: Why learn Java?
          source: O'Reilly Media
          url: http://www.oreillynet.com/pub/a/oreilly/java/news/whyjava_0600.html
        - text: Java the programming language
          source: Wikipedia
          url: http://en.wikipedia.org/wiki/Java_(programming_language)
  related: 

-
  word: casting
  definition: "Converting between two different data types is called casting, and it's a way of telling the computer \"yes, I know I'm changing the type and storing less information here. That's OK.\"</p><p>If you want to store less information, like going from a <code>double</code> to an <code>int</code>, you need to tell the computer you understand you're dropping information – you need to cast.</p>"
  example: "(int) 11.0           // = 11<br/>(int) 11.84          // = 11<br/>(double) 11          // = 11.0<br/>(double) 11/2        // = 5.5"
  external:
        - text: Overview of type casting
          source: YouTube
          url: https://www.youtube.com/watch?v=qJ5Dc8eLyqA
        - text: Type cast section
          source: Introduction to Programming Using Java
          url: "http://math.hws.edu/eck/cs124/javanotes6/c2/s5.html#basics.5.6"
  related: 

-
  word: "null"
  definition: "In Java, <code>null</code> is a special keyword that means \"empty\" or \"nothing.\" It can help you check whether an object hasn't yet received a value."
  succinct:
        - text: "A special Java keyword meaning \"empty\" or \"nothing.\""
          example: "null"
  example: "String empty;<br/>empty == null;              // returns true<br/>String blank = \"\";<br/>blank == null;              // returns false<br/>Object alsoEmpty;<br/>alsoEmpty == null;          // returns true"
  external:
        - text: What is null in Java?
          source: StackOverflow
          url: http://stackoverflow.com/questions/2707322/what-is-null-in-java
  related: 

-
  word: "constructor"
  definition: "Constructors are special methods that create new objects. You can think of them as ways to \"set up\" an object before you use it, including setting fields with start values."
  succinct:
        - text: "A special method, named after a <word data-key=\"class\">class</word>, to create a new object."
          example: "class Book{<br/>    String title;<br/>    String author;<br/><br/>    Book(){<br/>        title = \"Alice in Wonderland\";<br/>        author = \"Lewis Carroll\";<br/>    }<br/>}"
  example: "class Book{<br/>    String title;<br/>    String author;<br/><br/>    Book(){<br/>        title = \"Alice in Wonderland\";<br/>        author = \"Lewis Carroll\";<br/>    }<br/>}"
  external:
    - text: "Constructor basics"
      source: "Introduction to Programming Using Java"
      url: "http://math.hws.edu/eck/cs124/javanotes6/c5/s2.html#OOP.2.2" 
    - text: Example constructor
      source: JavaBasics
      url: http://www.leepoint.net/JavaBasics/oop/oop-30-constructor-student.html
    - text: Overloading constructors
      source: JavaBasics
      url: http://www.leepoint.net/JavaBasics/oop/oop-45-constructor-overloading.html
  related: 

-
  word: "instance-var"
  display: "Instance variables"
  definition: "Instance variables, or fields, are data stored inside an object. Instance variables act and look like other variables: they have a name, a value, and they can be assigned and reassigned."
  succinct:
        - text: "A special name for the variables, or fields, stored inside objects."
          example: "class Book{<br/> <span style=\"color:blue;\">   String title;<br/>    String author;</span><br/><br/>    Book(){<br/>        title = \"Alice in Wonderland\";<br/>        author = \"Lewis Carroll\";<br/>    }<br/>}"
  example: "class Book{<br/><span style=\"color:blue;\">  String title;<br/>    String author;</span><br/><br/>    Book(){<br/>        title = \"Alice in Wonderland\";<br/>        author = \"Lewis Carroll\";<br/>    }<br/>}"
  external:
    - text: "Initializing instance variables in a constructor"
      source: "Introduction to Programming Using Java"
      url: "http://math.hws.edu/eck/cs124/javanotes6/c5/s2.html#OOP.2.2" 
    - text: Instance variables in an example constructor
      source: JavaBasics
      url: http://www.leepoint.net/JavaBasics/oop/oop-30-constructor-student.html
  related: 
    - word: constructor
      reason: "Instance variables are often initialized inside of a constructor"

-
  word: about
  definition: "<p>This dictionary covers terms common in introductory Computer Science classes in Java, and it's both free and open source.</p><p>Browse through the terms at the left; all have definitions, and most come with examples and related resources, too. Sometimes, you'll see a link to another defintion, like <word data-key=\"instance-var\">instance variables</word>. These'll allow exploring related words without leaving your current page.</p><p>We'd love for you to contribute a word, defintion, link, or edit! Our <a href=\"https://github.com/christinac/apcomputerscience\" target=\"_blank\">Github repository <i class=\"icon ion-share\"></i></a> makes that easy to do."
  example:
  external:
        - text: "Where the text for our dictionary is stored – and where you can contribute!"
          source: Github
          url: https://github.com/christinac/teachapcs
  related:  

- word: byte
  definition: "A unit of binary information consisting of eight binary digits (bits). A byte can represent 2^8 or 256 unique numbers"
  succinct:
      - text: "8 bits."
        example: '10110011'
  example: '10000001'
  external:
      - text: "The byte is a unit of digital information in computing and telecommunications that most commonly consists of eight bits."
        source: Wikipedia
        url: http://en.wikipedia.org/wiki/Byte
  related:
   - word: "A fixed size group of digits that are used as a unit by a particular computer architecture."
     reason: "A byte is an example of a word."

-
  word: "parameter"
  display: "parameter"
  definition: "A variable that is used to refer to data passed in as an argument to a function or method."
  succinct:
        - text: "Variable that refers to the data passed into a method."
          example: "public int double(int x)<br/>{<br/>    // the parameter x refers to the data that is passed to the method<br/>    return 2 * x;<br/>}"
  example: "public int double(int x)<br/>{<br/>    // the parameter x refers to the data that is passed to the method<br/>    return 2 * x;<br/>}"
  external:
    - text: "Parameters in Computer Programming"
      source: "Wikipedia"
      url: "http://en.wikipedia.org/wiki/Parameter_(computer_programming)"
    - text: "Parameters in Java"
      source: "University of Toronto, CSC 148: Introduction to Computer Science"
      url: "http://www.cs.utoronto.ca/~dianeh/tutorials/params/" 
  related: 
    - word: "argument"
      reason: "Arguments and parameters are closely related. A parameter refers to the data passed in as it is used in the method; an argument is the data that is actually being passed to the method."

#    - 
#      word: "//"
#      definition: "Comments are notes you can leave in a program that the computer will ignore but might be useful to you or other programmers."
#      example: "//  I'm a one-line comment, and I won't be printed!"
#      external:
#        - text: "Comments are ignored by the compiler but are useful to other programmers. The Java programming language supports three types of comments ..."
#          source: Java Documentation
#          url: "http://docs.oracle.com/javase/tutorial/getStarted/application/index.html#COMMENTS"
#        - text: "This video explains what Java comments are and how to use them."
#          source: YouTube
#          url: "https://www.youtube.com/watch?v=-AoHFnlJ1r4"
#      related:
#        - word: /*
#          reason: "another way of starting off a comment in Java."
#        - word: /**
#          reason: "another way of starting off a comment in Java."
